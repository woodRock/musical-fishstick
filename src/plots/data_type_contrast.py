"""Generates a bar chart to contrast model performance across different data types.\n\nThis script creates a grouped bar chart to compare the performance of two specific\nmodels ('MLP-POM' and 'MLP-CORN') on two different datasets ('Boston' and 'Car'),\nrepresenting numerical and categorical data types, respectively. The chart\nvisualizes the Mean Absolute Error (MAE) for each model-dataset combination.\n"""\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef plot_data_type_contrast(figsize=(10, 4)):\n    """\n    Generates a conceptual plot contrasting Nominal, Ordinal, and Metric data.\n\n    This function creates a figure with three subplots, each illustrating the\n    characteristics of a different data type:\n    - Nominal data: Categories without inherent order (e.g., Apple, Banana, Orange).\n    - Ordinal data: Categories with a meaningful order but unequal intervals (e.g., Small, Medium, Large).\n    - Metric data: Ordered data with meaningful and equidistant intervals (e.g., a number line).\n\n    The plot is saved as 'figures/data_type_contrast.png'.\n\n    Args:\n        figsize (tuple, optional): A tuple (width, height) in inches for the figure size.\n                                   Defaults to (10, 4).\n    """\n    fig, axes = plt.subplots(1, 3, figsize=figsize, sharey=True)\n    fig.suptitle('Distinguishing Data Types: Nominal, Ordinal, and Metric', fontsize=16, y=1.05)\n\n    # --- 1. Nominal Data ---\n    ax = axes[0]\n    ax.set_title('(a) Nominal Data (No Order)', fontsize=12)\n    ax.set_yticks([])\n    ax.set_xticks([])\n    ax.set_xlim(-0.5, 2.5)\n    ax.set_ylim(0, 1)\n\n    # Draw categorical items (e.g., shapes or colors)\n    # Using text for simplicity, could be replaced with actual patches/images\n    ax.text(0, 0.5, "Apple", ha='center', va='center', fontsize=16, bbox=dict(boxstyle="round,pad=0.3", fc="red", ec="black", lw=1))\n    ax.text(1, 0.5, "Banana", ha='center', va='center', fontsize=16, bbox=dict(boxstyle="round,pad=0.3", fc="yellow", ec="black", lw=1))\n    ax.text(2, 0.5, "Orange", ha='center', va='center', fontsize=16, bbox=dict(boxstyle="round,pad=0.3", fc="orange", ec="black", lw=1))\n    \n    ax.text(1, 0.15, "Order: None", ha='center', va='center', fontsize=12, color='darkred', fontweight='bold')\n\n\n    # --- 2. Ordinal Data ---\n    ax = axes[1]\n    ax.set_title('(b) Ordinal Data (Has Order)', fontsize=12)\n    ax.set_yticks([])\n    ax.set_xticks([])\n    ax.set_xlim(-0.5, 2.5)\n    ax.set_ylim(0, 1)\n\n    # Draw ordered items (e.g., sizes: Small, Medium, Large)\n    ax.text(0, 0.5, "Small", ha='center', va='center', fontsize=16, bbox=dict(boxstyle="round,pad=0.3", fc="lightgray", ec="black", lw=1))\n    ax.text(1, 0.5, "Medium", ha='center', va='center', fontsize=16, bbox=dict(boxstyle="round,pad=0.3", fc="gray", ec="black", lw=1))\n    ax.text(2, 0.5, "Large", ha='center', va='center', fontsize=16, bbox=dict(boxstyle="round,pad=0.3", fc="darkgray", ec="black", lw=1))\n\n    # Add order arrows\n    ax.arrow(0.3, 0.65, 0.4, 0, head_width=0.05, head_length=0.1, fc='blue', ec='blue', lw=1.5)\n    ax.arrow(1.3, 0.65, 0.4, 0, head_width=0.05, head_length=0.1, fc='blue', ec='blue', lw=1.5)\n    \n    ax.text(1, 0.15, "Order: Yes (e.g., $S < M < L$)", ha='center', va='center', fontsize=12, color='darkgreen', fontweight='bold')\n\n\n    # --- 3. Metric (Regression) Data ---\n    ax = axes[2]\n    ax.set_title('(c) Metric Data (Ordered, Equidistant)', fontsize=12)\n    ax.set_yticks([])\n    ax.set_xticks([])\n    ax.set_xlim(0, 5)\n    ax.set_ylim(0, 1)\n\n    # Draw a number line / ruler\n    ax.plot([0.5, 4.5], [0.5, 0.5], color='black', lw=2) # Main line\n    for i in range(1, 5): # Tick marks\n        ax.plot([i, i], [0.45, 0.55], color='black', lw=1.5)\n        ax.text(i, 0.35, str(i), ha='center', va='top', fontsize=14, fontweight='bold')\n    \n    ax.text(2.5, 0.15, "Order: Yes (e.g., $1 \prec 2 \prec 3 \dots$)", ha='center', va='center', fontsize=12, color='purple', fontweight='bold')\n    ax.text(2.5, 0.8, "Distance: Measurable & Meaningful\n(e.g., $2-1 = 1$, $3-2=1$)", ha='center', va='bottom', fontsize=10, color='darkblue')\n\n    plt.tight_layout(rect=[0, 0.05, 1, 0.95]) # Adjust layout to make space for suptitle\n    plt.savefig("../../figures/data_type_contrast.png", dpi=300)\n    plt.show()\n\n# Generate the plot\nif __name__ == '__main__':\n    plot_data_type_contrast()\n